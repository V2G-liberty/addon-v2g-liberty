title: V2G Liberty
views:
  - path: default_view
    title: Main
    icon: mdi:car-electric
    cards:
      - type: vertical-stack
        title: Charger
        cards:
          - type: markdown
            entities:
              - entity: input_text.charger_state
              - entity: sensor.charger_real_charging_power
            content: >-
              <ha-icon icon="mdi:ev-station"></ha-icon>
              <div title="Polling charger">&nbsp;{{ states('input_text.poll_refresh_indicator')}}</div>
              <table><tbody><tr><th>
              {{ states('input_text.charger_state') }}
              </th><td>
              {{ states('sensor.charger_real_charging_power') }}&nbsp;Watt
              </td></tr></tbody></table>
            card_mod:
              style:
                .: |
                  ha-card {
                    font-size: 123%;
                  }
                ha-markdown$: |
                  div {
                    color: #999999;
                    font-size: 70%
                    font-weight: bold;
                    position: absolute;
                    top: 10px;
                    right: 15px;
                  }
                  div:hover:before {
                    content: "Receiving data";
                    color: var(--success-color);
                    font-size: 70%;
                  }
                  table {
                    width: 100%;
                    max-width: 100%;
                    margin: 8px 0;
                  }
                  th {
                    font-weight: normal;
                    text-align: left;
                  }
                  td {
                    text-align: right;
                    vertical-align: top;
                  }

          - type: conditional
            conditions:
              - entity: input_text.charger_state
                state: "Connected: controlled by Wallbox App"
              - entity: input_boolean.chargemodeoff
                state: "off"
            card:
              type: markdown
              card_mod:
                style: |
                  ha-card {
                    border-top: none;
                    border-top-left-radius: 0;
                    border-top-right-radius: 0;
                    margin-top: -28px;
                  }
              content: >-
                <ha-alert alert-type="warning" title="The charger is controlled by Wallbox App">V2G Liberty might not be able to charge</ha-alert>

                It seem that there is a charge time-schedule set in the Wallbox app. V2G&nbsp;Liberty probably cannot control the charger now.

                Remove the time-schedule for charging from the Wallbox app for automatic charging via V2G Liberty.

          - type: conditional
            conditions:
              - entity: sensor.charger_charger_state
                state: "0"
              - entity: sensor.charger_locked
                state: "1"
            card:
              type: markdown
              card_mod:
                style: |
                  ha-card {
                    border-top: none;
                    border-top-left-radius: 0;
                    border-top-right-radius: 0;
                    margin-top: -28px;
                  }
              content: >-
                <ha-alert alert-type="warning" title="The charger is locked">V2G Liberty cannot charge</ha-alert>

                Unlock the charger manually via the Wallbox app or -if used- the RFID card.

                This should restore automatic charging functionality.

          - type: conditional
            conditions:
              - entity: input_boolean.charger_modbus_communication_fault
                state: "on"
            card:
              type: markdown
              card_mod:
                style: |
                  ha-card {
                    border-top: none;
                    border-top-left-radius: 0;
                    border-top-right-radius: 0;
                    margin-top: -28px;
                  }
              content: >-
                <ha-alert alert-type="error" title="The charger is not responding.">Automatic charging has been stopped.</ha-alert>

                Please follow these instructions:

                1. Restart the charger manually<br/>Via the Wallbox app or my.wallbox.com<br/>`Settings > Advanced options > Restart`

                2. Wait 5 minutes

                3. Restart V2G Liberty add-on<br/>`V2G Liberty > Settings > ↺ Restart V2G Liberty` (bottom right)

                4. Wait 2 minutes

                5. Switch charge mode to automatic


                This should restore automatic charging functionality.

          - type: button
            tap_action:
              action: call-service
              service: script.disconnectnow
              service_data: {}
              target: {}
            entity: ""
            name: Disconnect now
            icon: mdi:power-plug-off
            icon_height: 40px
            hold_action:
              action: none
            card_mod:
              style: |
                ha-card {
                  padding-top: 10px;
                  margin-bottom: 48px;
                }

          - type: conditional
            conditions:
              - condition: screen
                media_query: "(min-width: 1024px)"
            card:
              type: markdown
              entities:
                - entity: input_number.total_charging_cost_last_7_days
                - entity: input_number.net_energy_last_7_days
                - entity: input_text.total_charge_time_last_7_days
                - entity: input_number.total_emissions_last_7_days
                - entity: input_number.total_charged_energy_last_7_days
                - entity: input_text.total_discharge_time_last_7_days
                - entity: input_number.total_saved_emissions_last_7_days
                - entity: input_number.total_discharged_energy_last_7_days
                - entity: input_number.net_emissions_last_7_days
                - entity: input_number.net_energy_last_7_days
              content: !include v2g_liberty_ui_module_stats.yaml
              card_mod:
                style: !include table_style.yaml

      - type: vertical-stack
        title: Connected car
        cards:
          - type: gauge
            entity: input_number.car_state_of_charge
            min: 0
            max: 100
            name: Car SoC
            # TODO: Base these values on user settings min/max charge (in secrets).
            segments:
              - from: 0
                color: var(--error-color)
              - from: 5
                color: var(--warning-color)
              - from: 20
                color: var(--success-color)
              - from: 80
                color: var(--warning-color)
            needle: true
            unit: "%"
            card_mod:
              style: |
                ha-card * {
                  filter: saturate(
                    {% if states('input_text.charger_state') == 'No car connected' %}
                    0
                    {% else %}
                    1
                    {% endif %}
                    )
                    brightness(
                      {% if states('input_text.charger_state') == 'No car connected' %}
                      1.3
                      {% else %}
                      1
                      {% endif %}
                      );
                }
          - type: markdown
            entities:
              - entity: input_number.car_remaining_range
            content: '≈ **{{ states("input_number.car_remaining_range")|round(0)}}** km'
            card_mod:
              style: |
                ha-card {
                  text-align: center;
                  border-top: none;
                  border-top-left-radius: 0;
                  border-top-right-radius: 0;
                  margin-top: -52px;
                }

          - type: custom:apexcharts-card
            apex_config:
              legend:
                show: true
                horizontalAlign: left
                onItemHover:
                  highlightDataSeries: false
                itemMargin:
                  vertical: 15
                  horizontal: 8
                inverseOrder: true
              grid:
                show: true,
                borderColor: "#cfcfcf"
                strokeDashArray: 1
                position: 'back'
              chart:
                height: '400px'
                zoom:
                  enabled: true
                animations:
                  enabled: false
            experimental:
              color_threshold: true
              hidden_by_default: true

            graph_span: 24h
            span:
              start: hour
              offset: "-4h"
            now:
              show: true
            header:
              show: true
              title: Car State of Charge (%)

            series:
              # Unfortunately the legend does not take the opacity into account for the markers (yet).
              # So the colors for the series need to have an opacity of 1...
              # Unfortunately zIndex also does not work (yet) on series. That is why the series are in
              # 'reverse-order', so that SoC lines are rendered over the price lines.
              # To have the legend items in the proper order (of 'importance'), the legend is set to inverseOrder.
              - entity: input_text.calender_item_in_chart
                show:
                  legend_value: false
                type: area
                color: var(--dark-primary-color)
                opacity: 0.2
                stroke_width: 0
                extend_to: false
                yaxis_id: SoC
                data_generator: |
                  return entity.attributes.records.map((record, index) => {
                    return [new Date(record.time).getTime(), record.soc];
                  });

              - entity: input_text.soc_prognosis_max_charge_now
                show:
                  legend_value: false
                type: line
                color: "#fea602"
                stroke_width: 2
                stroke_dash: 2
                curve: straight
                extend_to: false
                yaxis_id: SoC
                data_generator: |
                  return entity.attributes.records.map((record, index) => {
                    return [new Date(record.time).getTime(), record.soc];
                  });

              - entity: input_text.soc_prognosis_boost
                show:
                  legend_value: false
                type: line
                curve: straight
                color: "#e48628"
                stroke_width: 2
                extend_to: false
                yaxis_id: SoC
                data_generator: |
                  return entity.attributes.records.map((record, index) => {
                    return [new Date(record.time).getTime(), record.soc];
                  });
                # ToDo? use color_threshold feature

              - entity: input_text.co2_emissions
                show:
                  hidden_by_default: true
                  legend_value: false
                transform: "return x / 6;"
                color: "#ADD6B2"
                opacity: 1
                extend_to: false
                stroke_width: 1
                curve: stepline
                yaxis_id: ElectricityPriceAxis
                data_generator: |
                  return entity.attributes.records.map((record, index) => {
                    return [new Date(record.time).getTime(), record.emission];
                  });
                type: line

              - entity: input_text.production_prices
                show:
                  hidden_by_default: true
                  legend_value: false
                color_threshold:
                  - value: 0
                    color: red
                    opacity: 0.9
                  - value: 1
                    color: '#FBCCD6'
                    opacity: 1
                color: '#FBCCD6'
                opacity: 1
                extend_to: false
                stroke_width: 1
                curve: stepline
                yaxis_id: ElectricityPriceAxis
                data_generator: |
                  return entity.attributes.records.map((record, index) => {
                    return [new Date(record.time).getTime(), record.price];
                  });
                type: line

              - entity: input_text.consumption_prices
                show:
                  legend_value: false
                color_threshold:
                  - value: -100
                    color: green
                    opacity: 0.9
                  - value: 0
                    color: '#C393C5'
                    opacity: 1
                color: '#C393C5'
                opacity: 1
                extend_to: false
                stroke_width: 1
                curve: stepline
                yaxis_id: ElectricityPriceAxis
                data_generator: |
                  return entity.attributes.records.map((record, index) => {
                    return [new Date(record.time).getTime(), record.price];
                  });
                type: line

              - entity: input_text.soc_prognosis
                show:
                  legend_value: false
                type: line
                color: "#fea602"
                stroke_width: 2
                extend_to: false
                yaxis_id: SoC
                data_generator: |
                  return entity.attributes.records.map((record, index) => {
                    return [new Date(record.time).getTime(), record.soc];
                  });

              - entity: input_number.car_state_of_charge
                show:
                  legend_value: false
                color: "#009be5"
                stroke_width: 2
                type: line
                extend_to: now
                yaxis_id: SoC

            yaxis:
              - id: SoC
                min: 0
                max: 100
                decimals: 0
                apex_config:
                  tickAmount: 5

              - id: ElectricityPriceAxis
                decimals: 0
                apex_config:
                  tickAmount: 5
                  showAlways: true
                  forceNiceScale: true
                opposite: true
                min: "|-2|"
                max: "|+2|"
            card_mod:
              debug: true
              style: |
                ha-card:before {
                  content: "¢ent/kWh";
                  font-size: 90%;
                  color: #797979;
                  display: block;
                  position: relative;
                  width: calc(100% - 20px);
                  text-align: right;
                  top: 50px;
                }
                div[seriesname="Calendarxitemxinxchart"], 
                div[seriesname="SoCxBoost"], 
                div[seriesname="input_textxsoc_prognosis_max_charge_now"]{
                  display: none;
                }


          - type: markdown
            entities:
              - entity: input_text.optimisation_mode
              - entity: input_text.utility_display_name
            content: >-
              <table><tbody><tr><th>
              Optimised on <span>{{states("input_text.optimisation_mode")}}</span>
              </th><td>
              {{states("input_text.utility_display_name")}}
              </td></tr></tbody></table>
            card_mod:
              style:
                .: |
                  ha-card {
                    border-top: none;
                    border-top-left-radius: 0;
                    border-top-right-radius: 0;
                    margin-top: -25px;
                  }
                ha-markdown$: |
                  table {
                    width: 100%;
                    max-width: 100%;
                    margin: 8px 0;
                  }
                  th {
                    font-weight: normal;
                    text-align: left;
                  }
                  td {
                    text-align: right;
                    vertical-align: top;
                  }
                  span {
                    font-weight: bold;
                  }
          - type: conditional
            conditions:
              - entity: input_boolean.error_no_new_schedule_available
                state: "on"
            card:
              type: markdown
              content: >-
                <ha-alert alert-type="warning" title="No new schedules available">
                The current schedule wil remain active.<br/>
                Usually this problem is solved automatically within an hour.<br/>
                If the schedule does not fit your needs, consider charging manually.</ha-alert>
              card_mod:
                style: |
                  ha-card {
                    border-top: none;
                    border-top-left-radius: 0;
                    border-top-right-radius: 0;
                    margin-top: -22px;
                  }

          - type: conditional
            conditions:
              - entity: input_boolean.error_epex_prices_cannot_be_retrieved
                state: "on"
            card:
              type: markdown
              content: >-
                <ha-alert alert-type="warning">Temporarily no price and/or emissions data available.</ha-alert>
              card_mod:
                style: |
                  ha-card {
                    border-top: none;
                    border-top-left-radius: 0;
                    border-top-right-radius: 0;
                    margin-top: -22px;
                  }

      - type: vertical-stack
        title: Charge mode
        # TODO: Use tile card for this??
        cards:
          - type: grid
            cards:
              - type: button
                name: Automatic
                hold_action:
                  action: none
                entity: input_boolean.chargemodeautomatic
                show_state: false
                icon_height: 40px
                card_mod:
                  style: |
                    ha-card {
                      padding: 10% 0 !important;
                    }
              - type: button
                name: Max Charge Now
                icon: mdi:battery-alert
                hold_action:
                  action: none
                entity: input_boolean.chargemodemaxboostnow
                show_state: false
                icon_height: 40px
                card_mod:
                  style: |
                    ha-card {
                      padding: 10% 0 !important;
                    }
              - type: button
                name: "Off"
                hold_action:
                  action: none
                entity: input_boolean.chargemodeoff
                icon_height: 40px
                show_state: false
                card_mod:
                  style: |
                    ha-card {
                      padding: 10% 0 !important;
                    }
            square: false
          - type: conditional
            conditions:
              - entity: input_text.charger_state
                state: No car connected
              - entity: input_boolean.chargemodemaxboostnow
                state: "on"
            card:
              type: markdown
              content: >-
                <ha-alert alert-type="warning" title="No car is connected">To start Max-charge-now, please connect the car to the charger.</ha-alert>

          - type: markdown
            title: Reservations
            entities:
              - input_text.input_text.calendar_events
            content: >-
                <div>Target SoC is read from the event summary, if not found, 100% is used.</div> 
                {% if state_attr('input_text.calendar_events', 'v2g_ui_event_calendar') == None %}
                Calendar configuration seems invalid, please check settings.
                {% else %}
                {% if states.input_text.calendar_events.attributes.v2g_ui_event_calendar == [] %}
                No reservations in the next seven days.
                {% else %}
                <table>{% for cal_day in states.input_text.calendar_events.attributes.v2g_ui_event_calendar %}
                <thead>
                <tr>
                <th colspan=4>{{ as_timestamp(cal_day.day) | timestamp_custom("%A") }}</th>
                <td>{{ as_timestamp(cal_day.day) | timestamp_custom("%Y-%m-%d") }}</td>
                </tr>
                </thead>{% for event in cal_day.events %}<tbody><tr>
                {% if event.dismissed == true %}
                <td><s>{{ as_timestamp(event.start) | timestamp_custom("%H:%M") }}</s></td><td><span>-</span></td>
                <td><s>{{ as_timestamp(event.end) | timestamp_custom("%H:%M") }}</s></td>
                <td></td>
                <th><s>{{ event.summary }}</s><b>(dismissed by user)</b> {% if event.description != "" %}<s><span>{{ event.description }}</span></s>{% endif %}</th>
                {% else %}
                <td>{{ as_timestamp(event.start) | timestamp_custom("%H:%M") }}</td><td><span>-</span></td>
                <td>{{ as_timestamp(event.end) | timestamp_custom("%H:%M") }}</td>
                <td><strong>●</strong></td>
                <th>{{ event.summary }}{% if event.description != "" %}<span>{{ event.description }}</span>{% endif %}</th>
                {% endif %}
                </tr>{% endfor %}
                </tbody>{% endfor %}</table>{% endif %}{% endif %}

            card_mod:
              style:
                ha-markdown$: |
                  div {
                    margin-top: 0px !important;
                    margin-bottom: 24px !important;
                    font-size: 90%;
                    color: var(--secondary-text-color);
                  }
                  table {
                    width: 100%;
                    max-width: 100%;
                  }
                  thead * {
                    vertical-align: top;
                    font-weight: 400 !important;
                    font-size: 16px;
                    padding: 8px 0 12px 0;
                  }
                  td span {
                    padding: 0 6px;
                  }
                  td strong {
                    padding-left: 16px;
                    line-height: 0.6;
                    font-size: 175%;
                    color: var(--dark-primary-color);
                    opacity: 0.3;
                  }
                  thead th {
                    text-align: left;
                  }
                  thead td {
                    text-align: right;
                  }
                  thead td, thead th {
                    border-top: 1px solid var(--divider-color);
                  }
                  tbody s {
                    color:  var(--secondary-text-color);
                  }
                  tbody * {
                    vertical-align: top;
                    text-align: left;
                    font-weight: 400 !important;
                    font-size: 14px;
                    padding: 0 0 12px 0;
                  }
                  tbody th {
                    width: 90%;
                    padding-left: 16px;
                  }
                  tbody th span{
                    font-size: 90%;
                    color: #797979;
                    display: block;
                    padding: 4px 0 0 0;
                  }

          - type: conditional
            conditions:
              - condition: screen
                media_query: "(max-width: 1024px)"
            card:
              type: markdown
              entities:
                - entity: input_number.total_charging_cost_last_7_days
                - entity: input_number.net_energy_last_7_days
                - entity: input_text.total_charge_time_last_7_days
                - entity: input_number.total_emissions_last_7_days
                - entity: input_number.total_charged_energy_last_7_days
                - entity: input_text.total_discharge_time_last_7_days
                - entity: input_number.total_saved_emissions_last_7_days
                - entity: input_number.total_discharged_energy_last_7_days
                - entity: input_number.net_emissions_last_7_days
                - entity: input_number.net_energy_last_7_days
              content: !include v2g_liberty_ui_module_stats.yaml
              card_mod:
                style: !include table_style.yaml

          - type: markdown
            entities:
              - input_text.v2g_liberty_version
            content: >-
              Version <span>{{ state_attr("update.v2g_liberty_update", "installed_version") }}</span>

            card_mod:
              style:
                .: |
                  ha-card {
                    border: none;
                    color: #797979;
                    background-color: transparent;
                    text-align: right;
                  }
                ha-markdown$: |
                  span {
                    font-weight: bold;
                  }
  # Settings tab
  # TODO: Make this a separate dashboard:
  # + that is not shown in the left menu
  # + that is admin only
  # + that is linked from the main page
  # On the main page make all content conditional:
  # if settings are not complete do not show them, only the link to settings.
  - title: Settings
    type: masonry
    icon: mdi:cog
    cards:
      - type: vertical-stack
        cards:
        - type: entities
          title: Optimisation
          entities:
            - entity: input_select.optimisation_mode
              name: Optimisation mode
              icon: mdi:chart-timeline-variant-shimmer
              card_mod: !include info_icon_style.yaml
            - entity: input_number.car_min_soc_in_percent
              name: Schedule lower limit
              card_mod: !include input_number_style.yaml
            - entity: input_number.car_max_soc_in_percent
              name: Schedule upper limit
              card_mod: !include input_number_style.yaml
            - entity: input_number.allowed_duration_above_max_soc_in_hrs
              card_mod: !include input_number_style.yaml
          card_mod:
            style: |
              ha-card.type-entities div.card-content div:nth-child(1):hover::after {
                content: "How should scheduling be optimised: \A + Maximise financial gains based on dynamic prices \A + Minimise emissions from CO₂ release in electricity production";
              }
              ha-card.type-entities div.card-content div:nth-child(2):hover::after {
                content: "The scheduling will not discharge below this limit and, -if the car returns with and SoC below this value- will charge to this minimum a.s.a.p. before regular scheduling. \A \A A high value results in always having a greater driving range available, even when not planned, but less capacity available for dis-charge and so lesser earnings. \A \A A lower value results in a (sometimes) smaller driving range available for un-planned drives but there is always more room for the schedule. \A \ A The setting must be between 10 and 30, default is 20.";
              }
              ha-card.type-entities div.card-content div:nth-child(3):hover::after {
                content: "The schedule will use this as an upper limit for regular scheduling. It can be used to further protect the battery from degradation as a 100% charge (for longer periods) may reduce battery health/lifetime. \A \A When a calendar item is present, the schedule will ignore this setting and try to charge to 100% (or if the calendar item has a target use that). \A \A A low setting reduces schedule flexibility and so the capability to earn money and reduce emissions. \A \A The setting must be between 60 and 100, default is 80.";
              }
              ha-card.type-entities div.card-content div:nth-child(4):hover::after {
                content: "When the car connects with a SoC higher than the upper limit, how long may the schedule take to bring the SoC back to this maximum? \A \A A longer duration gives opportunity for a more optimal schedule but might have a (minor) degradation effect on the battery. \A \A This duration is excluding the (minimum) time it takes to get back to the desired maximum under normal cycling conditions. \A \A The setting must be between 2 and 36, default is 12.";
              }
              ha-card.type-entities div.card-content div:hover::after {
                white-space: pre-wrap;
                font-size: 90%;
                color: var(--primary-text-color);
                position: absolute;
                width: 300px;
                right: 4px;
                top: 44px;
                background-color: var(--primary-background-color);
                border: 1px solid var(--input-idle-line-color);
                border-radius: 8px;
                padding: 8px 16px;
                z-index: 110;
              }
              ha-card.type-entities div.card-content div:nth-child(1):hover::after {
                top: auto !important;
                bottom: 52px;
              }

        - type: entities
          title: Charger
          entities:
            - entity: input_text.charger_host_url
              card_mod: !include info_icon_style.yaml
            - entity: input_number.charger_port
              card_mod: !include input_number_style.yaml
            - type: button
              name: ' '
              action_name: TEST
              tap_action:
                action: call-service
                service: script.test_charger_connection
                target: {}
            - type: divider
          card_mod:
              style: |
                ha-card {
                  padding-bottom: 40px;
                }
                ha-card.type-entities div.card-content div:nth-child(1):hover::after {
                  content: "The host URL (IP address) and port can be found in the Wallbox app. \A \A Connect with bluetooth and in the app go to Settings > Connectivity > Ethernet (or Wi-Fi).";
                }
                ha-card.type-entities div.card-content div:nth-child(2):hover::after {
                  content: "By default the charger uses port 502.";
                }
                ha-card.type-entities div.card-content div:hover::after {
                  white-space: pre-wrap;
                  font-size: 90%;
                  color: var(--primary-text-color);
                  position: absolute;
                  width: 300px;
                  right: 4px;
                  top: 44px;
                  background-color: var(--primary-background-color);
                  border: 1px solid var(--input-idle-line-color);
                  border-radius: 8px;
                  padding: 8px 16px;
                  z-index: 110;
                }
        - type: markdown
          entities:
            - input_text.charger_connection_status
            - input_text.charger_max_available_power
          content: >-
            {{ states("input_text.charger_connection_status")}} | 
            {{ (now().timestamp() - states.input_text.charger_connection_status.last_reported.timestamp()) | timestamp_custom('%H:%M:%S', False) }} ago
            <div>&nbsp;</div>
            The charger is set to provide max. **{{ states("input_text.charger_max_available_power")}}**&nbsp;W
          card_mod:
            style:
              .: |
                ha-card {
                  background-color: transparent;
                  border: none;
                  max-width: calc(100% - 100px);
                  margin-top: -118px;
                  margin-left: 12px;
                  padding: 0 !important;
                }
              ha-markdown$: |
                div {
                  height: 16px !important;
                  padding: 0;
                  margin: 0;
                }
        - type: conditional
          conditions:
            - condition: state
              entity: input_text.charger_connection_status
              state: "Successfully connected"
          card:
            type: entities
            entities:
              - entity: input_boolean.use_reduced_max_charge_power
                name: Reduce max. (dis-)charge power
            card_mod:
              style: |
                ha-card {
                  border-top: none;
                  border-top-left-radius: 0;
                  border-top-right-radius: 0;
                  margin-top: -36px;
                  padding-top: 0;
                  padding-bottom: 0;
                }
                ha-card * {
                  padding-top: 0;
                }

        - type: conditional
          conditions:
            - condition: state
              entity: input_text.charger_connection_status
              state: "Successfully connected"
            - condition: state
              entity: input_boolean.use_reduced_max_charge_power
              state: 'on'
          card:
            type: entities
            entities:
              - entity: input_number.charger_max_charging_power
                name: Max charging power
                card_mod: !include input_number_style.yaml
              - entity: input_number.charger_max_discharging_power
                name: Max discharging power
                card_mod: !include input_number_style.yaml
            card_mod:
                style: |
                  ha-card {
                    border-top: none;
                    border-top-left-radius: 0;
                    border-top-right-radius: 0;
                    margin-top: -28px;
                  }
                  ha-card.type-entities div.card-content div:nth-child(1):hover::after {
                    content: "Set this to reduce the maximum charge power that is set in the charger.";
                  }
                  ha-card.type-entities div.card-content div:nth-child(2):hover::after {
                    content: "Set this to reduce the maximum discharge power. The charger has one max. charge power setting for both charge and discharge. \A \A Usually the discharge power is the same as the charge power. In some cases the charger or (gird operator) regulations require a different (lower) dis-charge power.";
                  }
                  ha-card.type-entities div.card-content div:hover::after {
                    white-space: pre-wrap;
                    font-size: 90%;
                    color: var(--primary-text-color);
                    position: absolute;
                    width: 300px;
                    right: 4px;
                    top: 44px;
                    background-color: var(--primary-background-color);
                    border: 1px solid var(--input-idle-line-color);
                    border-radius: 8px;
                    padding: 8px 16px;
                    z-index: 110;
                  }
                  ha-card.type-entities div.card-content::after {
                    content: "It is recommended to use a load balancer (power-boost for WB). This makes it possible to set a higher max. charge amperage in the charger, resulting in more efficient charging and higher yields.";
                    white-space: pre-wrap;
                    font-size: 90%;
                    color: var(--primary-text-color);
                    display: block;
                    margin-top: 16px;
                    margin-bottom: 8px;
                    padding: 16px;
                    background-color: var(--card-background-color);
                  }
        - type: markdown
          content: >-
            <ha-alert alert-type="info">Electric safety must be provided by the hardware, 
            not this software! Please consult a certified electrician what maximum power can be set on the charger.
            </ha-alert>
          card_mod:
            style: |
              ha-card {
                border-top: none;
                border-top-left-radius: 0;
                border-top-right-radius: 0;
                margin-top: -24px;
              }

        - type: entities
          title: Administrator
          entities:
            - entity: input_select.admin_mobile_name
            - entity: input_select.admin_mobile_platform
          card_mod:
            style: |
              ha-card.type-entities div.card-content::before {
                content: "High priority notifications get send to the administrators mobile device.";
                white-space: pre-wrap;
                color: var(--primary-text-color);
                display: block;
                padding: 8px 0px;
                margin-bottom: 8px;
                margin-top: -8px;
              }


      - type: vertical-stack
        cards:
        - type: entities
          title: Car
          entities:
            - entity: input_number.car_max_capacity_in_kwh
              card_mod: !include input_number_style.yaml
            - entity: input_number.charger_plus_car_roundtrip_efficiency
              card_mod: !include input_number_style.yaml
            - entity: input_number.car_consumption_wh_per_km
              card_mod: !include input_number_style.yaml
          card_mod:
            style: |
              ha-card.type-entities div.card-content div:nth-child(1):hover::after {
                content: "The usable energy storage capacity of the battery of the car. \A For the Nissan Leaf this is usually 21, 39 or 59 (advertised as 24, 40 and 62). \A See https://ev-database.org.";
              }
              ha-card.type-entities div.card-content div:nth-child(2):hover::after {
                content: "A typical EV + charger roundtrip efficient is around 85 %. \A Use an setting between 50 and 100.";
              }
              ha-card.type-entities div.card-content div:nth-child(3):hover::after {
                content: "The average electricity usage of your car in Watt-hour (Wh) per km \A In most cars you can find historical data in the menu's or see https://ev-database.org. \A \A Normally this is between 140 (very efficient) and 300 (rather in-efficient vans). \A \A Make sure you use the right 'unit of measure': Wh per km.";
              }
              ha-card.type-entities div.card-content div:hover::after {
                white-space: pre-wrap;
                font-size: 90%;
                color: var(--primary-text-color);
                position: absolute;
                width: 300px;
                right: 4px;
                top: 44px;
                background-color: var(--primary-background-color);
                border: 1px solid var(--input-idle-line-color);
                border-radius: 8px;
                padding: 8px 16px;
                z-index: 110;
              }

        - type: entities
          title: Car reservation calendar
          entities:
            - entity: input_select.car_calendar_source
              card_mod: !include info_icon_style.yaml
          card_mod:
            style: |
              ha-card.type-entities div.card-content div:nth-child(1):hover::after {
                content: "Choose 'Direct caldav source' if you want to directly use your online calendar, without installing an integration. This provides more controle and calendar details. \A \A Choose 'Home Assistant integration' if you have a calendar integration installed that provides the car reservations. This is needed for Google calendars.";
              }
              ha-card.type-entities div.card-content div:nth-child(1):hover::after {
                top: auto !important;
                bottom: 52px;
              }
              ha-card.type-entities div.card-content div:hover::after {
                white-space: pre-wrap;
                font-size: 90%;
                color: var(--primary-text-color);
                position: absolute;
                width: 300px;
                right: 4px;
                top: 44px;
                background-color: var(--primary-background-color);
                border: 1px solid var(--input-idle-line-color);
                border-radius: 8px;
                padding: 8px 16px;
                z-index: 110;
              }

        - type: conditional
          conditions:
            - entity: input_select.car_calendar_source
              state: 'Home Assistant integration'
          card:
            type: entities
            entities:
              - entity: input_select.integration_calendar_entity_name
            card_mod:
              style: |
                ha-card {
                  border-top: none;
                  border-top-left-radius: 0;
                  border-top-right-radius: 0;
                  margin-top: -24px;
                  padding-bottom: 32px;
                  margin-bottom: 8px;
                }

        - type: conditional
          conditions:
            - entity: input_select.car_calendar_source
              state: 'Direct caldav source'
          card:
            type: entities
            entities:
              - entity: input_text.calendar_account_init_url
              - entity: input_text.calendar_account_username
              - entity: input_text.calendar_account_password
              - type: button
                name: ' '
                action_name: TEST
                tap_action:
                  action: call-service
                  service: script.test_calendar_connection
                  target: {}
            card_mod:
              style: |
                ha-card.type-entities div.card-content::before {
                  content: "See documentation tab for more details.";
                  white-space: pre-wrap;
                  color: var(--primary-text-color);
                  display: block;
                  padding: 8px 0px;
                  margin-bottom: 8px;
                  margin-top: -8px;
                }
                ha-card {
                  border-top: none;
                  border-top-left-radius: 0;
                  border-top-right-radius: 0;
                  margin-top: -24px;
                }

        - type: conditional
          conditions:
            - entity: input_select.car_calendar_source
              state: 'Direct caldav source'
          card:
            type: markdown
            entity: input_text.calendar_account_connection_status
            content: >-
              {{ states("input_text.calendar_account_connection_status")}} |  
              {{ (now().timestamp() - states.input_text.calendar_account_connection_status.last_reported.timestamp()) | timestamp_custom('%H:%M:%S', False) }} ago
            card_mod:
              style: |
                ha-card {
                  background-color: transparent;
                  border: none;
                  max-width: calc(100% - 100px);
                  margin-top: -70px;
                  margin-left: 12px;
                  padding: 0 !important;
                }

        - type: conditional
          conditions:
            - condition: state
              entity: input_text.calendar_account_connection_status
              state: "Successfully connected"
            - condition: state
              entity: input_select.car_calendar_source
              state: 'Direct caldav source'
          card:
            type: entities
            entities:
              - entity: input_select.car_calendar_name
            card_mod:
              style: |
                ha-card {
                  border-top: none;
                  border-top-left-radius: 0;
                  border-top-right-radius: 0;
                  margin-top: -36px;
                  padding-top: 0;
                  padding-bottom: 0;
                }

      - type: vertical-stack
        cards:
          - type: entities
            title: Energy contract
            entities:
              - entity: input_select.electricity_provider
                name: Electricity provider
                icon: mdi:office-building
            show_header_toggle: false

          - type: conditional
            conditions:
              - condition: state
                entity: input_select.electricity_provider
                state: gb_octopus_energy
            card:
              type: entities
              entities:
                - entity: input_text.octopus_import_code
                  card_mod: !include info_icon_style.yaml
                - entity: input_text.octopus_export_code
                  card_mod: !include info_icon_style.yaml
                - entity: input_select.gb_dno_region
                  name: Your Great Britain DNO region

              card_mod:
                style: |
                    ha-card {
                      border-top: none;
                      border-top-left-radius: 0;
                      border-top-right-radius: 0;
                      margin-top: -24px;
                    }
                    ha-card.type-entities div.card-content::before {
                      content: "For Octopus Electric Agile contracts V2G Liberty supports self provided electricity prices.";
                      white-space: pre-wrap;
                      color: var(--primary-text-color);
                      display: block;
                      padding: 8px 0px;
                      margin-bottom: 8px;
                      margin-top: -8px;
                      border-top: 1px solid var(--input-idle-line-color);
                    }
                    ha-card.type-entities div.card-content div:nth-child(1):hover::after {
                      content: "Please enter the import code, e.g. 'AGILE-FLEX-22-11-25'.";
                    }
                    ha-card.type-entities div.card-content div:nth-child(2):hover::after {
                      content: "Please enter the export code, e.g. 'AGILE-OUTGOING-19-05-13'.";
                    }
                    ha-card.type-entities div.card-content div:nth-child(3):hover::after {
                      content: "Please enter region, a one-letter code, e.g. 'H'.";
                    }
                    ha-card.type-entities div.card-content div:hover::after {
                      white-space: pre-wrap;
                      font-size: 90%;
                      color: var(--primary-text-color);
                      position: absolute;
                      width: 300px;
                      right: 4px;
                      top: 44px;
                      background-color: var(--primary-background-color);
                      border: 1px solid var(--input-idle-line-color);
                      border-radius: 8px;
                      padding: 8px 16px;
                      z-index: 110;
                    }

          - type: conditional
            conditions:
              - condition: state
                entity: input_select.electricity_provider
                state: au_amber_electric
            card:
              type: entities
              entities:
                - entity: input_text.own_consumption_price_entity_id
                  card_mod: !include info_icon_style.yaml
                - entity: input_text.own_production_price_entity_id
                  card_mod: !include info_icon_style.yaml
              card_mod:
                style: |
                    ha-card {
                      border-top: none;
                      border-top-left-radius: 0;
                      border-top-right-radius: 0;
                      margin-top: -24px;
                    }
                    ha-card.type-entities div.card-content::before {
                      content: "For Amber Electric V2G Liberty supports self provided electricity prices via the Amber integration.";
                      white-space: pre-wrap;
                      color: var(--primary-text-color);
                      display: block;
                      padding: 8px 0px;
                      margin-bottom: 8px;
                      margin-top: -8px;
                      border-top: 1px solid var(--input-idle-line-color);
                    }
                    ha-card.type-entities div.card-content div:nth-child(1):hover::after {
                      content: "Please enter the entity id (sensor.****_general_forecast) of the consumption entity that is populated by the Amber integration.";
                    }
                    ha-card.type-entities div.card-content div:nth-child(2):hover::after {
                      content: "Please enter the entity id (sensor.****_feed_in_forecast) of the production entity that is populated by the Amber integration.";
                    }
                    ha-card.type-entities div.card-content div:hover::after {
                      white-space: pre-wrap;
                      font-size: 90%;
                      color: var(--primary-text-color);
                      position: absolute;
                      width: 300px;
                      right: 4px;
                      top: 44px;
                      background-color: var(--primary-background-color);
                      border: 1px solid var(--input-idle-line-color);
                      border-radius: 8px;
                      padding: 8px 16px;
                      z-index: 110;
                    }

          - type: entities
            entities:
              - type: divider
              - entity: input_boolean.use_vat_and_markup
                icon: mdi:cash-edit
            card_mod:
                style: |
                  ha-card {
                    border-top: none;
                    border-top-left-radius: 0;
                    border-top-right-radius: 0;
                    margin-top: -24px;
                  }
          - type: conditional
            conditions:
              - condition: state
                entity: input_boolean.use_vat_and_markup
                state: 'on'
            card:
              type: entities
              entities:
                - entity: input_number.energy_price_vat
                  icon: mdi:close
                  card_mod: !include input_number_style.yaml
                - entity: input_number.energy_price_markup_per_kwh
                  icon: mdi:plus
                  card_mod: !include input_number_style.yaml
              card_mod:
                  style: |
                    ha-card {
                      border-top: none;
                      border-top-left-radius: 0;
                      border-top-right-radius: 0;
                      margin-top: -16px;
                      padding-left: 36px;
                    }
                    ha-card.type-entities div.card-content::before {
                      content: "VAT / markup data is only taken into account for generic electricity providers or for self-provided. \A It is used for transforming the raw price data (from FM) to net price to be shown in UI: (market_price_per_kwh + markup_per_kwh) * VAT";
                      white-space: pre-wrap;
                      color: var(--primary-text-color);
                      display: block;
                      padding: 8px 0px;
                      margin-bottom: 8px;
                      margin-top: -8px;
                    }
                    ha-card.type-entities div.card-content div:first-child:hover::after {
                      content: "Value Added Tax \A If you'd like to effectively 'not use VAT' you can set it to 0%.";
                    }
                    ha-card.type-entities div.card-content div:nth-child(2):hover::after {
                      content: "This is a markup in cents(!) per kWh, e.g. 14.539 is a normal markup in the Netherlands.";
                    }
                    ha-card.type-entities div.card-content div:hover::after {
                      white-space: pre-wrap;
                      font-size: 90%;
                      color: var(--primary-text-color);
                      position: absolute;
                      width: 300px;
                      right: 4px;
                      top: 44px;
                      background-color: var(--primary-background-color);
                      border: 1px solid var(--input-idle-line-color);
                      border-radius: 8px;
                      padding: 8px 16px;
                      z-index: 110;
                    }

          - type: entities
            title: FlexMeasures account
            entities:
              - type: weblink
                url: https://v2g-liberty.eu
                new_tab: True
                icon: ""
              - entity: input_text.fm_account_username
              - entity: input_text.fm_account_password
              - entity: input_boolean.fm_show_option_to_change_url
                secondary_info: none
                icon: mdi:link-edit
              - type: conditional
                conditions:
                  - entity: input_boolean.fm_show_option_to_change_url
                    state: 'on'
                row:
                  entity: input_text.fm_host_url
              - type: button
                name: ' '
                action_name: TEST
                tap_action:
                  action: call-service
                  service: script.test_fm_connection
                  target: {}
            card_mod:
              style: |
                ha-card.type-entities div.card-content div:nth-child(1) {
                  margin-bottom: 12px !important;
                  margin-left: 8px !important;
                }
                ha-card.type-entities div.card-content div:nth-child(1)::before {
                  content: "An account for the default server can be requested at:";
                  color: var(--primary-text-color);
                  margin-left: 32px;
                }

          - type: markdown
            entity: input_text.fm_connection_status
            content: >-
              {{ states("input_text.fm_connection_status")}} |  
              {{ (now().timestamp() - states.input_text.fm_connection_status.last_reported.timestamp()) | timestamp_custom('%H:%M:%S', False) }} ago
            card_mod:
              style: |
                  ha-card {
                    background-color: transparent;
                    border: none;
                    max-width: calc(100% - 100px);
                    margin-top: -70px;
                    margin-left: 24px;
                  }

          - type: conditional
            conditions:
              - condition: state
                entity: input_text.fm_connection_status
                state: Please select an asset
            card:
              type: entities
              entities:
                - entity: input_select.fm_asset
              card_mod:
                style: |
                    ha-card {
                      border-top: none;
                      border-top-left-radius: 0;
                      border-top-right-radius: 0;
                      margin-top: -28px;
                    }

          - type: entities
            entities:
              - type: button
                name: ' '
                action_name: ↺ Restart V2G Liberty
                tap_action:
                  action: call-service
                  confirmation:
                    text: Restart Home Assistant and the V2G Liberty Add-on now? If you made any manual changes to the Home Assistant configuration make sure to check if it is valid.
                  service: script.restart_ha
                  target: {}
              - type: button
                name: ' '
                action_name: Reset to factory defaults >>
                tap_action:
                  action: call-service
                  confirmation:
                    text: Are you sure you want to reset the settings to the factory defaults? This cannot be undone. Home Assistant will restart, this may take a few minutes.
                  service: script.reset_to_factory_defaults
                  target: {}
            card_mod:
              style: |
                ha-card {
                  border: none;
                  margin: 0;
                  padding: 0;
                  background-color: transparent;
                }